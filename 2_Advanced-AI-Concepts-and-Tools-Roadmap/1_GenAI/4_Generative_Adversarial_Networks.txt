🎯 Advanced AI Concepts
✅ 3) Generative Adversarial Networks (GANs) (IMP)

🧠 What is a GAN?
A Generative Adversarial Network (GAN) consists of two neural networks — a Generator and a Discriminator — that compete with each other in a game-theoretic setting.

🔁 Goal:
The Generator (G) tries to create realistic fake data
The Discriminator (D) tries to detect if data is real or fake
Over time, the Generator gets so good that it can fool the Discriminator — and generate amazingly real content!


📘 Real-Life Analogy
Imagine:
A forger (Generator) creates fake paintings
A detective (Discriminator) tries to spot the fakes
As both improve, the forger produces masterpieces that look real


✅ Real-Life Applications of GANs
Domain	Use Case
🎨 Art & Media	AI-generated portraits, avatars, NFTs
👩‍🔬 Healthcare	Generate synthetic medical scans for training
🧠 AI Research	Data augmentation for rare datasets
🛍 E-commerce	Clothing try-ons, product mockups
🎥 Film/Animation	Deepfakes, CGI character realism



✅ Architecture of a GAN
Noise (z) → [ Generator (G) ] → Fake Data
                          ↓
         Real / Fake? ← [ Discriminator (D) ] ← Real Data




Generator: Learns to map random noise to real-looking data
Discriminator: Learns to distinguish real data from fake data
Training: Adversarial → both networks improve together

✅ Loss Functions
Discriminator Loss
LD = −[log(D(x))+log(1−D(G(z)))]

Generator Loss:
LG = −log(D(G(z)))




✅ Python Example: Simple GAN on MNIST (Keras/TensorFlow)
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Dense, LeakyReLU
from tensorflow.keras.models import Sequential
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt

# Load data
(X_train, _), _ = mnist.load_data()
X_train = (X_train.reshape(-1, 784).astype("float32") - 127.5) / 127.5

# Generator
def build_generator():
    model = Sequential([
        Dense(128, input_dim=100),
        LeakyReLU(0.2),
        Dense(784, activation='tanh')
    ])
    return model

# Discriminator
def build_discriminator():
    model = Sequential([
        Dense(128, input_dim=784),
        LeakyReLU(0.2),
        Dense(1, activation='sigmoid')
    ])
    return model

# Models
generator = build_generator()
discriminator = build_discriminator()
discriminator.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Combined model
discriminator.trainable = False
gan_input = tf.keras.Input(shape=(100,))
generated_image = generator(gan_input)
gan_output = discriminator(generated_image)
gan = tf.keras.Model(gan_input, gan_output)
gan.compile(loss='binary_crossentropy', optimizer='adam')

# Training
epochs = 10000
batch_size = 64
for epoch in range(epochs):
    # Train discriminator
    real_imgs = X_train[np.random.randint(0, X_train.shape[0], batch_size)]
    noise = np.random.normal(0, 1, (batch_size, 100))
    fake_imgs = generator.predict(noise)

    d_loss_real = discriminator.train_on_batch(real_imgs, np.ones((batch_size, 1)))
    d_loss_fake = discriminator.train_on_batch(fake_imgs, np.zeros((batch_size, 1)))

    # Train generator
    noise = np.random.normal(0, 1, (batch_size, 100))
    g_loss = gan.train_on_batch(noise, np.ones((batch_size, 1)))

    if epoch % 1000 == 0:
        print(f"Epoch {epoch}, G Loss: {g_loss}")
        img = generator.predict(np.random.normal(0, 1, (1, 100)))
        plt.imshow(img[0].reshape(28, 28), cmap='gray')
        plt.axis('off')
        plt.title("Generated Digit")
        plt.show()




✅ Variants of GANs
GAN Variant	Use Case
DCGAN	Deep CNN-based GAN for better images
Conditional GAN (cGAN)	Generates data based on class labels
CycleGAN	Image-to-image translation (e.g., horse ↔ zebra)
StyleGAN	High-quality face generation
Pix2Pix	Sketch to photo, map to satellite
BigGAN	High-resolution, large-scale image gen



✅ Comparison: GAN vs VAE vs Diffusion
Feature	GAN	VAE	Diffusion
Output Quality	✅ Sharp, realistic	😐 Blurry sometimes	✅ Very high (slow)
Training	❗ Unstable (needs care)	✅ Stable	✅ Stable but slower
Application	Images, faces, deepfakes	Features, compression	Art, animations, textures




✅ Summary Table
Component	Role
Generator	Generates new, realistic data
Discriminator	Distinguishes real from fake
Loss Function	Binary cross-entropy (adversarial)
Input	Random noise vector
Output	Synthetic (generated) data



✅ Real-World Projects with GANs
Project	Description
Face Generator (StyleGAN2)	Generate new celebrity faces
Sketch-to-Art (Pix2Pix, GauGAN)	Turn drawings into art
Anime Avatar Generator	Train on anime faces dataset
Deepfake Face Swap	Replace faces in videos
Text-to-Image GAN	Generate images from captions (cGAN + BERT)












