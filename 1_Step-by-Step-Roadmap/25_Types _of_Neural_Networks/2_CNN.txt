🎯 2) Convolutional Neural Networks (CNN) – IMP

✅ What is a CNN?
A Convolutional Neural Network (CNN) is a type of neural network designed to process grid-like data, such as images.

It automatically detects patterns, edges, textures, shapes, and objects using filters, without manual feature engineering.

📷 CNN Is Best For:
Task	Example
Image Classification	Is this a cat or a dog?
Object Detection	Where’s the person in the image?
Face Recognition	Identify people from images
Medical Imaging	Detect tumors in X-rays or MRIs
OCR (Text from image)	Reading text in receipts, documents

🧠 How CNN Works (Simple Flow)
Input Image (28x28 pixels)
↓
Convolution Layer → Detect patterns (filters)
↓
ReLU Activation → Keep positive values
↓
Pooling Layer (MaxPooling) → Downsample
↓
Flatten → Convert to 1D
↓
Fully Connected (Dense) Layer → Classification
↓
Output → Probability for each class


✅ Real-Life Example: Digit Recognition (0–9)
Using the MNIST dataset (28x28 grayscale images of handwritten digits)


✅ Python Code: CNN with Keras on MNIST
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# Load MNIST data
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Reshape and normalize
X_train = X_train.reshape(-1, 28, 28, 1).astype("float32") / 255
X_test = X_test.reshape(-1, 28, 28, 1).astype("float32") / 255

# One-hot encode labels
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Build CNN model
model = Sequential([
    Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)),
    MaxPooling2D(pool_size=(2,2)),
    
    Conv2D(64, kernel_size=(3,3), activation='relu'),
    MaxPooling2D(pool_size=(2,2)),
    
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')  # 10 classes
])

# Compile
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train
model.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test))

# Evaluate
loss, acc = model.evaluate(X_test, y_test)
print(f"✅ Test Accuracy: {acc:.2f}")


✅ CNN Layers Explained
Layer	Purpose
Conv2D	Extract local features (edges, patterns)
ReLU	Add non-linearity
MaxPooling2D	Downsample image, retain key features
Flatten	Convert 2D → 1D for dense layer
Dense	Classify based on extracted features


✅ Summary Table
CNN Feature	Explanation
🌐 Input Type	2D or 3D image data (e.g., 28x28, RGB)
🧠 Learns	Filters that detect shapes, edges, textures
🏆 Best For	Image classification, object detection
🛠 Common Tools	Conv2D, MaxPooling2D, Flatten, Dense
🎯 Output	Class probabilities


✅ Real-World Applications of CNNs
Domain	Use Case
Healthcare	Detect diseases from X-rays, CT scans
Automotive	Self-driving car vision systems
Security	Face ID in phones, surveillance recognition
Retail	Product recognition, barcode scanning
Agriculture	Plant disease classification from photos




