Perfect! Here's a complete Python script that covers ALL essential Pandas functions for data cleaning, including:

âœ… Handling missing values
âœ… Removing duplicates
âœ… Data type conversion
âœ… Renaming columns
âœ… String cleanup
âœ… Outlier detection
âœ… Filtering
âœ… Replacing values
âœ… Resetting index
âœ… Encoding categorical data
âœ… Sorting
âœ… Exporting cleaned data


ðŸ’¾ Full Pandas Data Cleaning Code (Copy-Paste Ready)

# pandas_data_cleaning.py

import pandas as pd
import numpy as np

# --------------------------------------------
# ðŸ”¹ Step 1: Create a sample dirty dataset
# --------------------------------------------

data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Alice'],
    'Age': [25, np.nan, 30, 22, 999, 25],
    'City': ['New York', 'Los Angeles', 'new york', 'Chicago', 'New-York', None],
    'Joined': ['2020-01-15', '2021/02/20', '2020-13-01', '2021-05-01', '2021-06-12', '2020-01-15'],
    'Gender': ['F', 'M', 'M', 'M', 'F', 'F']
}

df = pd.DataFrame(data)
print("ðŸ”¹ Original Dirty Data:\n", df)

# --------------------------------------------
# âœ… Step 2: Handling Missing Values
# --------------------------------------------

# Check for missing values
print("\nâœ… Missing Values Count:\n", df.isnull().sum())

# Fill missing values with default or calculated value
df['Age'] = df['Age'].replace(999, np.nan)  # Treat 999 as missing
df['Age'] = df['Age'].fillna(df['Age'].mean())

df['City'] = df['City'].fillna('Unknown')

# --------------------------------------------
# âœ… Step 3: Removing Duplicates
# --------------------------------------------

df = df.drop_duplicates()
print("\nâœ… Removed Duplicates:\n", df)

# --------------------------------------------
# âœ… Step 4: Standardizing Text / Strings
# --------------------------------------------

# Normalize City column (e.g., "New-York", "new york" -> "New York")
df['City'] = df['City'].str.lower().str.replace('-', ' ').str.title()

# Strip extra whitespace from names
df['Name'] = df['Name'].str.strip().str.title()

print("\nâœ… Standardized Strings:\n", df)

# --------------------------------------------
# âœ… Step 5: Data Type Conversion
# --------------------------------------------

# Convert Joined column to datetime
df['Joined'] = pd.to_datetime(df['Joined'], errors='coerce')

# Fix invalid dates (NaT) if necessary
df['Joined'] = df['Joined'].fillna(method='ffill')  # Forward fill

# --------------------------------------------
# âœ… Step 6: Outlier Detection (Age > 100)
# --------------------------------------------

# Filtering rows where Age looks suspicious (outlier logic)
df = df[df['Age'] < 100]

print("\nâœ… After Handling Outliers:\n", df)

# --------------------------------------------
# âœ… Step 7: Replace Values
# --------------------------------------------

# Replace gender abbreviations
df['Gender'] = df['Gender'].replace({'F': 'Female', 'M': 'Male'})

# --------------------------------------------
# âœ… Step 8: Filter Data (e.g., only New York residents)
# --------------------------------------------

ny_residents = df[df['City'] == 'New York']
print("\nâœ… Filtered: New York Residents:\n", ny_residents)

# --------------------------------------------
# âœ… Step 9: Resetting Index
# --------------------------------------------

df = df.reset_index(drop=True)
print("\nâœ… Reset Index:\n", df)

# --------------------------------------------
# âœ… Step 10: Encode Categorical Data (for ML)
# --------------------------------------------

# Convert 'Gender' to category codes
df['Gender_Code'] = df['Gender'].astype('category').cat.codes
print("\nâœ… Encoded Categorical Column:\n", df[['Gender', 'Gender_Code']])

# --------------------------------------------
# âœ… Step 11: Sort Data
# --------------------------------------------

df = df.sort_values(by='Age', ascending=True)
print("\nâœ… Sorted by Age:\n", df)

# --------------------------------------------
# âœ… Step 12: Export Cleaned Data
# --------------------------------------------

# Export to CSV
df.to_csv("cleaned_data.csv", index=False)
print("\nâœ… Cleaned Data exported to 'cleaned_data.csv'")


=====================================================================================================================================

Key Functions Used for Data Cleaning
Category	Function/Method Used
Missing Values	isnull(), fillna(), replace()
Duplicates	drop_duplicates()
String Cleanup	str.lower(), str.replace(), str.strip(), str.title()
Type Conversion	pd.to_datetime()
Outlier Handling	Filtering rows using conditions
Replace Values	replace()
Filtering	df[df[â€˜colâ€™] == value]
Index Reset	reset_index(drop=True)
Encoding Categorical	astype('category').cat.codes
Sorting	sort_values()
Exporting	to_csv()

=====================================================================================================================================

Real-time Use Case:
This code mimics cleaning a real-world customer dataset:
Fixing invalid values
Normalizing inconsistent formatting
Handling missing/duplicate data
Preparing for machine learning (encoding)

=====================================================================================================================================

