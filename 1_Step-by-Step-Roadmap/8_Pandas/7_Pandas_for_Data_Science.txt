Absolutely! Here's a complete and structured explanation of:

✅ Pandas basics
✅ Data cleaning
✅ Data manipulation
✅ Data merging
✅ All essential Pandas functions

Each section includes ready-to-copy Python code with real-world examples.


Pandas for Data Science – Full Guide



✅ 1. Importing Pandas and Creating DataFrames
import pandas as pd

# Creating a DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
}

df = pd.DataFrame(data)
print("📦 Original DataFrame:\n", df)



✅ 2. Data Cleaning with Pandas
import numpy as np

# Add some dirty data
df.loc[3] = [np.nan, np.nan, None]
df.loc[4] = ['Alice', 25, 'New York']  # duplicate

print("\n🔹 Dirty Data:\n", df)

# Check for missing values
print("\n🔍 Missing Value Check:\n", df.isnull().sum())

# Drop missing values
df_cleaned = df.dropna()

# Fill missing values
df_filled = df.fillna({'Name': 'Unknown', 'Age': df['Age'].mean(), 'City': 'Unknown'})

# Remove duplicates
df_no_duplicates = df.drop_duplicates()

# Replace values
df_replaced = df.replace('New York', 'NYC')

print("\n✅ After Cleaning:\n", df_cleaned)



✅ 3. Data Manipulation Functions
# Rename columns
df = df.rename(columns={'City': 'Location'})

# Convert to lowercase
df['Name'] = df['Name'].str.lower()

# Create new column
df['AgeGroup'] = df['Age'].apply(lambda x: 'Senior' if x >= 30 else 'Adult')

# Filter rows
adults = df[df['Age'] >= 30]

# Sort rows
sorted_df = df.sort_values(by='Age', ascending=False)

# Reset index
df_reset = df.reset_index(drop=True)

# Change column data type
df['Age'] = df['Age'].astype('int', errors='ignore')

print("\n🛠️ Manipulated Data:\n", df)



✅ 4. Merging, Joining, Concatenating DataFrames
# Another DataFrame for merging
orders = pd.DataFrame({
    'Name': ['alice', 'bob', 'charlie'],
    'OrderID': [101, 102, 103],
    'Amount': [250, 300, 400]
})

# Merge on 'Name'
merged_df = pd.merge(df, orders, on='Name', how='inner')

# Concatenate DataFrames
df1 = pd.DataFrame({'ID': [1, 2], 'Value': ['A', 'B']})
df2 = pd.DataFrame({'ID': [3, 4], 'Value': ['C', 'D']})
concat_df = pd.concat([df1, df2], axis=0)

print("\n🔗 Merged Data:\n", merged_df)
print("\n➕ Concatenated Data:\n", concat_df)



✅ 5. Grouping and Aggregation
# Group by and aggregate
grouped = merged_df.groupby('Name')['Amount'].sum().reset_index()

print("\n📊 Grouped Data:\n", grouped)



✅ 6. Reading and Writing Files
# Read CSV
# df = pd.read_csv('file.csv')

# Write to CSV
# df.to_csv('cleaned_data.csv', index=False)



✅ 7. Summary: Must-Know Pandas Functions (with examples)
Task	Code Example
Create DataFrame	pd.DataFrame(data)
Read CSV	pd.read_csv('file.csv')
Check missing values	df.isnull().sum()
Drop missing values	df.dropna()
Fill missing values	df.fillna(value)
Remove duplicates	df.drop_duplicates()
Replace values	df.replace(old, new)
Rename columns	df.rename(columns={'old':'new'})
Create new column	df['new'] = df['col'].apply(func)
Filter rows	df[df['col'] > value]
Sort values	df.sort_values(by='col')
Reset index	df.reset_index(drop=True)
Change data type	df['col'] = df['col'].astype('int')
Merge DataFrames	pd.merge(df1, df2, on='key')
Concatenate DataFrames	pd.concat([df1, df2], axis=0)
Group by and aggregate	df.groupby('col')['val'].sum()
Export to CSV	df.to_csv('file.csv', index=False)

✅ Real-Time Use Case
Scenario: You receive customer data with missing values, inconsistent casing, and multiple sources (orders, logs).
Pandas helps you:
Clean and standardize the data
Join datasets
Aggregate metrics like total purchases
Prepare the data for ML models