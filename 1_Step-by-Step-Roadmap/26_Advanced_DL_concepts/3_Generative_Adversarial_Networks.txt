🎯 Advanced DL Concepts
✅ 3) Generative Adversarial Networks (GANs) – IMP

🤖 What is a GAN?
A GAN (Generative Adversarial Network) is a type of deep learning model made of two neural networks competing with each other:
Generator (G): Creates fake data
Discriminator (D): Evaluates whether the data is real or fake

The two models play a game:
The Generator tries to fool the Discriminator
The Discriminator tries to detect fakes

Together, they improve until the Generator produces realistic data

🎯 Real-Life Analogy:
Imagine a counterfeit artist (Generator) and a police detective (Discriminator):
The artist tries to forge currency
The detective tries to catch forgeries
Over time, both get better — the forgeries become incredibly real!

✅ Real-World Use Cases of GANs
Domain	Use Case
🖼 Art & Design	Generate realistic images, paintings
🎥 Film & Gaming	Character generation, image enhancement
🧬 Healthcare	Generate realistic medical images (X-rays)
👤 Faces	Create faces of people who don’t exist
🧪 Data Science	Data augmentation (when real data is limited)

✅ GAN Architecture:
[Noise Vector] → Generator → Fake Data
                          ↓
                  Real / Fake? ← Discriminator ← Real Data

✅ GAN Structure: Components
Component	Role
Generator (G)	Learns to create fake data
Discriminator (D)	Learns to tell real from fake data
Loss Function	Binary Crossentropy for both G and D

✅ Python Code: Simple GAN to Generate Digits (using MNIST)
import tensorflow as tf
from tensorflow.keras.layers import Dense, LeakyReLU, BatchNormalization
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
import numpy as np
import matplotlib.pyplot as plt

# Load MNIST dataset (only images, not labels)
(X_train, _), (_, _) = tf.keras.datasets.mnist.load_data()
X_train = (X_train.astype('float32') - 127.5) / 127.5  # Normalize
X_train = X_train.reshape(-1, 784)

# Generator model
def build_generator():
    model = Sequential([
        Dense(128, input_dim=100),
        LeakyReLU(0.2),
        BatchNormalization(),
        Dense(784, activation='tanh')
    ])
    return model

# Discriminator model
def build_discriminator():
    model = Sequential([
        Dense(128, input_dim=784),
        LeakyReLU(0.2),
        Dense(1, activation='sigmoid')
    ])
    return model

# Optimizer
opt = Adam(0.0002, 0.5)

# Build & compile discriminator
discriminator = build_discriminator()
discriminator.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])

# Build generator
generator = build_generator()

# Freeze discriminator in GAN model
discriminator.trainable = False

# Combined GAN model
gan = Sequential([generator, discriminator])
gan.compile(loss='binary_crossentropy', optimizer=opt)

# Training the GAN
epochs = 10000
batch_size = 64

for epoch in range(epochs):
    # Train discriminator
    idx = np.random.randint(0, X_train.shape[0], batch_size)
    real_imgs = X_train[idx]
    
    noise = np.random.normal(0, 1, (batch_size, 100))
    fake_imgs = generator.predict(noise)
    
    d_loss_real = discriminator.train_on_batch(real_imgs, np.ones((batch_size, 1)))
    d_loss_fake = discriminator.train_on_batch(fake_imgs, np.zeros((batch_size, 1)))
    
    # Train generator
    noise = np.random.normal(0, 1, (batch_size, 100))
    g_loss = gan.train_on_batch(noise, np.ones((batch_size, 1)))
    
    if epoch % 1000 == 0:
        print(f"Epoch {epoch}, Generator Loss: {g_loss}")
        sample = generator.predict(np.random.normal(0, 1, (1, 100)))
        plt.imshow(sample.reshape(28, 28), cmap='gray')
        plt.axis('off')
        plt.show()

✅ GAN Variants
Type	Use Case
DCGAN (Deep Convolutional GAN)	Better for images
Conditional GAN (cGAN)	Generate specific labels
CycleGAN	Image-to-image translation
StyleGAN	High-quality face generation
Pix2Pix	Image restoration, sketch → photo

✅ Summary
GAN Feature	Description
Generator	Learns to create realistic data
Discriminator	Learns to distinguish real vs fake
Training Strategy	Adversarial game (minimax loss)
Output	New, synthetic data (e.g., images, music)

✅ When to Use GANs?
Task	Use GAN?
You want to create synthetic images	✅ Yes
You want to augment rare data	✅ Yes
You need creative content generation	✅ Yes
You want predictive classification	❌ No





